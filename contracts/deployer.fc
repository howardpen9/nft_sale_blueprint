;; Deployer for nft sales
#include "op-codes.fc";
#include "stdlib.fc";

int op::do_sale() asm "0x0fe0ede PUSHINT";

;; storage scheme
;; storage#_ owner_address:MsgAddress
;;           = Storage;


() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {  ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    ;; cs.end_parse();

    int op = in_msg_body~load_uint(32);

    if (op == op::ownership_assigned()) { ;; got nft for deploy
        int query_id = in_msg_body~load_uint(64);
        var prev_owner = in_msg_body~load_msg_addr();
        int sub_op = in_msg_body~load_uint(32);
        throw_if(404, sub_op != op::do_sale());

          (cell state_init, cell body) = (in_msg_body~load_ref(), in_msg_body~load_ref());      
        in_msg_body.end_parse();
        int state_init_hash = cell_hash(state_init);
        slice dest_address = begin_cell().store_int(0, 8).store_uint(state_init_hash, 256).end_cell().begin_parse();

        var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_uint(4, 3).store_slice(dest_address)
        .store_grams(20000000) ;; 0.02 TON
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(body)
        .end_cell();
        send_raw_message(msg, 1); ;; paying fees, revert on errors

        var transfer_msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(sender_address)
              .store_grams(0)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_uint(op::transfer(), 32)
              .store_uint(query_id, 64)
              .store_uint(4, 3).store_slice(dest_address) ;; new owner
              .store_slice(prev_owner) ;; response_to
              .store_int(0, 1) ;; no payload
              .store_grams(0) ;; forward_amount
              .store_int(0, 1) ;; no body
              .end_cell();
        var reserve = balance - msg_value;
        if (reserve < 1000000) {
            reserve = 1000000; ;; 0.001 TON
        } else {
            reserve += 1000; ;; 0.000001 TON for storage usage
        }
        raw_reserve(reserve, 0); ;; reserve some bebras  🐈
        send_raw_message(transfer_msg, 128); ;; paying fees, revert on errors

        return ();
    }
    ;;
    if (op == 1) { ;; accept for deploy
        return ();
    }

    if (op == 555) {
        var ds = get_data().begin_parse();
        var owner_address = ds~load_msg_addr();
        throw_unless(403, equal_slices(owner_address, sender_address));
        ;; way to fix unexpected troubles with auction contract
        ;; for example if some one transfer nft to this contract
        var msg = in_msg_body~load_ref().begin_parse();
        var mode = msg~load_uint(8);
        send_raw_message(msg~load_ref(), mode);
        return ();
    }

    throw(0xffff);
}

